/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.tessla_compiler.preprocessing

import de.uni_luebeck.isp.tessla.core.TesslaAST.Core._
import de.uni_luebeck.isp.tessla.core.TranslationPhase
import de.uni_luebeck.isp.tessla.core.TranslationPhase.{Result, Success}
import de.uni_luebeck.isp.tessla.tessla_compiler.ExtendedSpecification

/**
 * Translates a TeSSLa Core AST to an [[ExtendedSpecification]] (AST + usage information)
 */
object UsageAnalysis extends TranslationPhase[Specification, ExtendedSpecification] {

  /**
   * Function triggering the translation from a simple TeSSLa Core Specification to an [[ExtendedSpecification]]
   * with usage information (i.e. which variable is used in which definitions)
   * @param spec The TeSSLa Core specification to be examined
   * @return Core AST plus usage information
   */
  override def translate(spec: Specification): Result[ExtendedSpecification] = {

    var usages: collection.mutable.HashMap[Identifier, Set[Identifier]] = collection.mutable.HashMap()

    def findUsages(ea: ExpressionArg, usedIn: Identifier): Unit = {
      ea match {
        case RecordAccessorExpression(_, target, _, _)   => findUsages(target, usedIn)
        case FunctionExpression(_, _, body, result, _)   => findUsagesInDefs(body); findUsages(result, usedIn)
        case ApplicationExpression(applicable, args, _)  => (args :+ applicable).foreach(findUsages(_, usedIn))
        case TypeApplicationExpression(applicable, _, _) => findUsages(applicable, usedIn)
        case RecordConstructorExpression(entries, _)     => entries.foreach(e => findUsages(e._2._1, usedIn))
        case ExpressionRef(id, _, _)                     => usages += (id -> (usages.getOrElse(id, Set()) + usedIn))
        case _                                           =>
      }
    }

    def findUsagesInDefs(defs: Map[Identifier, DefinitionExpression]): Unit = {
      defs.foreach {
        case (id, d) =>
          if (!usages.contains(id)) {
            usages += (id -> Set())
          }
          findUsages(d, id)
      }
    }

    findUsagesInDefs(spec.definitions)

    Success(ExtendedSpecification(spec, Some(usages.toMap), None, None), Seq())
  }

}
