/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.tessla_compiler.backends.scalaBackend

import de.uni_luebeck.isp.tessla.core.{Diagnostic, Errors}
import de.uni_luebeck.isp.tessla.tessla_compiler.Diagnostics.CompilationWarning

import scala.reflect.internal.util.Position
import scala.reflect.internal.util.Position.formatMessage
import scala.tools.nsc.Settings
import scala.tools.nsc.reporters.FilteringReporter

/**
 * A reporter implementation raising TeSSLa compiler errors if the supervised Scala compiler raises an error
 * and collects TeSSLa warnings if it raises warnings or information
 *
 * @param settings Settings passed to the reporter
 */
class TesslaCompilerReporter(val settings: Settings) extends FilteringReporter {

  val warnings: collection.mutable.ArrayBuffer[Diagnostic] = collection.mutable.ArrayBuffer()

  override def doReport(pos: Position, msg: String, severity: Severity): Unit = {
    val combMsg = formatMessage(pos, msg, shortenFile = false)
    println(combMsg)
    severity match {
      case reflect.internal.Reporter.INFO    => warnings += CompilationWarning(combMsg, "scalac", "info")
      case reflect.internal.Reporter.WARNING => warnings += CompilationWarning(combMsg, "scalac", "warning")
      case reflect.internal.Reporter.ERROR =>
        throw Errors.InternalError(s"Scala Compilation raised error, compilation aborted:\n$combMsg")
      case _ =>
        throw Errors.InternalError(
          s"Scala Compilation raised error of unknown Severity, compilation aborted:\n$combMsg"
        )
    }
  }
}
