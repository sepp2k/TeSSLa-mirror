#module OSL {
  ## Add event generation to every call of the function before the actual function call
  def @InstFunctionCall(name: String)

  ## Add event generation to every call of the function before the actual function call
  def @InstFunctionCallArg(name: String, index: Int)

  ## Add event generation to the first line of the function
  def @InstFunctionCalled(name: String)

  ## Add event generation to the first line of the function
  def @InstFunctionCalledArg(name: String, index: Int)

  ## Add event generation to every return inside of the function. Generates unit events.
  def @InstFunctionReturn(name: String)

  ## Add event generation to every return inside of the function. Generates events carrying the returned value as data.
  def @InstFunctionReturnValue(name: String)

  ## Add event generation to every call of the function after the function returned. Generates unit events.
  def @InstFunctionReturned(name: String)

  ## Add event generation to every call of the function after the function returned. Generates events carrying the
  ## returned value as data.
  def @InstFunctionReturnedValue(name: String)

  ## Instrument every reading access of a global variable with the given name.
  ## Can handle more complex patterns, e.g. `*&bar[][].foo`
  def @GlobalRead(lvalue: String)

  ## Instrument every reading access of a local variable with the given name inside the given function.
  ## Can handle more complex patterns, e.g. `*&bar[][].foo`
  def @LocalRead(lvalue: String, function: String)

  ## Instrument every writing access of a global variable with the given name.
  ## Can handle more complex patterns, e.g. `*&bar[][].foo`
  def @GlobalWrite(lvalue: String)

  ## Instrument every writing access of a local variable with the given name inside the given function.
  ## Can handle more complex patterns, e.g. `*&bar[][].foo`
  def @LocalWrite(lvalue: String, function: String)

  ## Writes the current thread ID to the annotated stream every time any other instrumentation produces any event
  def @ThreadId
#}
