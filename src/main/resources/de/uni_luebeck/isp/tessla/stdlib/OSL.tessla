#module OSL {
  # Add event generation to every call of the function before the actual function call
  def @InstFunctionCall(name: String)
  def @InstFunctionCallArg(name: String, index: Int)

  # Add event generation to the first line of the function
  def @InstFunctionCalled(name: String)
  def @InstFunctionCalledArg(name: String, index: Int)

  # Add event generation to every return inside of the function
  def @InstFunctionReturn(name: String)

  # Add event generation to every call of the function after the function returned
  def @InstFunctionReturned(name: String)

  # Instrument every reading access of a global variable with the given name.
  # Can handle more complex patterns, e.g. *&bar[][].foo
  def @GlobalRead(lvalue: String)

  # Instrument every reading access of a local variable with the given name inside the given function.
  # Can handle more complex patterns, e.g. *&bar[][].foo
  def @LocalRead(lvalue: String, function: String)

  # Instrument every writing access of a global variable with the given name.
  # Can handle more complex patterns, e.g. *&bar[][].foo
  def @GlobalWrite(lvalue: String)

  # Instrument every writing access of a local variable with the given name inside the given function.
  # Can handle more complex patterns, e.g. *&bar[][].foo
  def @LocalWrite(lvalue: String, function: String)
#}
