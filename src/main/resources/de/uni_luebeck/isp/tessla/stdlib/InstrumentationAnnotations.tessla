## Annotations controlling the instrumentation of C code
module InstrumentationAnnotations {}

## Add event generation to every call of the function before the actual function call
def @InstFunctionCall(name: String)

## Add event generation to every call of the function before the actual function call
def @InstFunctionCallArg(name: String, index: Int)

## Add event generation to the first line of the function
def @InstFunctionCalled(name: String)

## Add event generation to the first line of the function
def @InstFunctionCalledArg(name: String, index: Int)

## Add event generation to every return inside of the function. Generates events carrying the returned value as data.
def @InstFunctionReturn(name: String)

## Add event generation to every return inside of the function. Generates events carrying the returned value as data.
def @InstFunctionReturnArg(name: String, index: Int)

## Add event generation to every call of the function after the function returned. Generates events carrying the
## returned value as data.
def @InstFunctionReturned(name: String)

## Add event generation to every call of the function after the function returned. Generates events carrying the
## returned value as data.
def @InstFunctionReturnedArg(name: String, index: Int)

## Instrument every reading access of a global variable with the given name.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
def @InstRead(lvalue: String)

## Instrument every reading access of a global variable with the given name.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
## Get the index as event's value.
def @InstReadIndex(lvalue: String, index: Int)

## Instrument every reading access of a local variable with the given name inside the given function.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
def @InstReadInFunction(lvalue: String, function: String)

## Instrument every reading access of a local variable with the given name inside the given function.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
## Get the index as event's value.
def @InstReadInFunctionIndex(lvalue: String, index: Int, function: String)

## Instrument every writing access of a global variable with the given name.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
def @InstWrite(lvalue: String)

## Instrument every writing access of a global variable with the given name.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
## Get the index as event's value.
def @InstWriteIndex(lvalue: String, index: Int)

## Instrument every writing access of a local variable with the given name inside the given function.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
def @InstWriteInFunction(lvalue: String, function: String)

## Instrument every writing access of a local variable with the given name inside the given function.
## Can handle more complex patterns, e.g. `*&bar[][].foo`
## Get the index as event's value.
def @InstWriteInFunctionIndex(lvalue: String, index: Int, function: String)

## Writes the current thread ID to the annotated stream every time any other instrumentation produces any event
def @ThreadId
