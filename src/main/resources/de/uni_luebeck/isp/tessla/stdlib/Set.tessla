module Set {
  def empty[T]: Set[T] = __builtin__(Set_empty)

  @liftable
  def singleton[T](value: T): Set[T] = add(empty[T], value)

  @liftable
  def add[T](set: Set[T], item: T): Set[T] = __builtin__(Set_add)

  @liftable
  def contains[T](set: Set[T], item: T): Bool = __builtin__(Set_contains)

  @liftable
  def remove[T](set: Set[T], item: T): Set[T] = __builtin__(Set_remove)

  @liftable
  def size[T](set: Set[T]): Int = __builtin__(Set_size)

  @liftable
  def union[T](set1: Set[T], set2: Set[T]): Set[T] = __builtin__(Set_union)

  @liftable
  def intersection[T](set1: Set[T], set2: Set[T]): Set[T] = __builtin__(Set_intersection)

  @liftable
  def minus[T](set1: Set[T], set2: Set[T]): Set[T] = __builtin__(Set_minus)

  @liftable
  def fold[T, U](set: Set[T], start: U, f: (U, T) => U): U = __builtin__(Set_fold)

  def collect[T](value: Events[T]) = {
    def set: Events[Set[T]] = default(add(last(set, value), value), empty[T])
    set
  }

  def collectWithRemove[T](value: Events[T], removeValue: Events[T]) = {
    def old = last(set, merge(value, removeValue))
    def operation: Events[Set[T]] = lift3(old, value, removeValue, (o: Option[Set[T]], v: Option[T], r: Option[T]) =>
      Some(minus(union(getSome(o), Option.toSet(v)), Option.toSet(r))))
    def set = default(operation, empty[T])
    set
  }
}
