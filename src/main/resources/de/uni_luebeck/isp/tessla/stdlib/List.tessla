## Lists
module List {

  ## Returns an empty list without any element of type `T`
  def empty[T]: List[T] = __builtin__(List_empty)

  ## Returns the number of elements in the given list
  @liftable
  def size[T](list: List[T]): Int = __builtin__(List_size)

  ## Returns [`true`](#true) if the given list has a size of zero
  @liftable
  def isEmpty[T](list: List[T]): Bool = size(list) == 0

  ## Appends the given element to the end of the given list
  ##
  ## **Usage example:**
  ##
  ## ~~~ruby
  ## in x: Events[Int]
  ## def old = last(list, x)
  ## def list: Events[List[Int]] = merge(List_append(old, x), List_empty[Int])
  ## out list
  ## ~~~
  ##
  ## **Trace example:**
  ##
  ## ~~~trace
  ## option timeDomain: [-1,8]
  ## stream x: events
  ## stream list: events
  ## ---
  ## 0: list = List()
  ## 2: list = List(1)
  ## 2: x = 1
  ## 4: list = List(1, 2)
  ## 4: x = 2
  ## 6: list = List(1, 2, 3)
  ## 6: x = 3
  ## ~~~
  @liftable
  def append[T](list: List[T], element: T): List[T] = __builtin__(List_append)

  ## Prepends the given element to the begining of the given list
  @liftable
  def prepend[T](element: T, list: List[T]): List[T] = __builtin__(List_prepend)

  ## Returns the tail of the given list
  @liftable
  def tail[T](list: List[T]): List[T] = __builtin__(List_tail)

  @liftable
  def init[T](list: List[T]): List[T] = __builtin__(List_init)

  @liftable
  def get[T](list: List[T], index: Int): T = __builtin__(List_get)

  @liftable
  def set[T](list: List[T], index: Int, value: T): List[T] = __builtin__(List_set)

  @liftable
  def head[T](list: List[T]): T = get(list, 0)

  @liftable
  def last[T](list: List[T]): T = get(list, size(list)-1)

  @liftable
  def fold[T, U](list: List[T], start: U, f: (U, T) => U): U = __builtin__(List_fold)
}

# Define the type outside of the module
# so one can write `List[Int]` instead of `List.List[Int]`.
type List[T] = __builtin__(List)