## Lists
module List {
  def empty[T]: List[T] = __builtin__(List_empty)

  @liftable
  def size[T](list: List[T]): Int = __builtin__(List_size)

  @liftable
  def isEmpty[T](list: List[T]): Bool = size(list) == 0

  @liftable
  def append[T](list: List[T], element: T): List[T] = __builtin__(List_append)

  @liftable
  def prepend[T](element: T, list: List[T]): List[T] = __builtin__(List_prepend)

  @liftable
  def tail[T](list: List[T]): List[T] = __builtin__(List_tail)

  @liftable
  def init[T](list: List[T]): List[T] = __builtin__(List_init)

  @liftable
  def get[T](list: List[T], index: Int): T = __builtin__(List_get)

  @liftable
  def set[T](list: List[T], index: Int, value: T): List[T] = __builtin__(List_set)

  @liftable
  def head[T](list: List[T]): T = get(list, 0)

  @liftable
  def last[T](list: List[T]): T = get(list, size(list)-1)

  @liftable
  def fold[T, U](list: List[T], start: U, f: (U, T) => U): U = __builtin__(List_fold)
}

# Define the type outside of the module
# so one can write `List[Int]` instead of `List.List[Int]`.
type List[T] = __builtin__(List)