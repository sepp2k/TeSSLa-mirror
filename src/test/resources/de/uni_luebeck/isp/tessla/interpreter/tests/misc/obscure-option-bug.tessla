type Queue[D] := List[(Int, D)]

def enq[D](t: Int, d: D, q: Queue[D]) :=
  List.append(q, (t, d))

def Queue_empty[D] := List.empty[(Int, D)]

type QueueA[D] := ${unknownBefore: Int, queue: Queue[D]}

def QueueA[D](unknownBefore: Int, queue: Queue[D]) := ${unknownBefore, queue}

def QueueA_empty[D] := QueueA(0, Queue_empty[D])

def remOlderA[D](t: Int, q: QueueA[D]) := {
  def uB := if t < q.unknownBefore then q.unknownBefore else 0
  return QueueA(uB, Queue_empty[D])
}

def remNewerA[D](t: Int, qOpt: Option[QueueA[D]]) :=
  if isNone(qOpt)
  then QueueA(t, Queue_empty[D])
  else QueueA(min(t, getSome(qOpt).unknownBefore), Queue_empty[D])

def sig[A](a: A) := const(a, ())
def totalA(f: (Option[Int], Option[QueueA[Int]]) => Option[QueueA[Int]]) :=
  fun(a: Option[Option[Option[Int]]], b: Option[Option[Option[QueueA[Int]]]]) =>
    if isSome(a) && isNone(getSome(a)) || isSome(b) && isNone(getSome(b)) then Some(None[Option[QueueA[Int]]])
    else if isNone(a) || isNone(b) then None[Option[Option[QueueA[Int]]]]
    else Some(Some(f(getSome(getSome(a)), getSome(getSome(b)))))

in l: Events[Int]

def stripped: Events[Option[Option[QueueA[Int]]]] :=
  lift(
    sig(Some(Some(0))),
    merge(sig(Some(Some(QueueA_empty[Int]))), last(stripped, l)),
    totalA(fun(tOpt: Option[Int], q: Option[QueueA[Int]]) =>
      if isNone(tOpt) then None[QueueA[Int]] else Some(
        remOlderA(12, remNewerA(getSome(tOpt), None[QueueA[Int]]))
      )))

out stripped
