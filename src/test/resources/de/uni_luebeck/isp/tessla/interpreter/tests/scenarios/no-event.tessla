in a: Events[Unit]
in b: Events[Unit]
in z: Events[Unit]

def filterConst[T](x: T, cond: Events[Bool]): Events[T] = lift(cond, nil[Unit], (c: Option[Bool], nix: Option[Unit]) =>
    if getSome(c) then Some(x) else None[T]
)

def merge[T, U](x: Events[T], y: Events[U]) :=
  filterConst((), default(x==x, false) || default(y==y, false))

def c := merge(a,b)

def verify := default(const(false, c), true)

out a
out b
out c
out verify
