in list: Events[List[Int]]

def sum(list: List[Int]) := List_fold(list, 0, fun(a: Int, b: Int) => a + b)
def slift1[A,B](e: Events[A], f: (A) => B) :=
  lift1(e, fun(a: Option[A]) => if isNone(a) then None[B] else Some(f(getSome(a))))  

out slift1(list, sum) as s
out List_size(list) as size

@liftable
def List_isEmpty[T](list: List[T]) := List_size(list) == 0

def l1 :=
  if List_isEmpty(list) then list
  else List_append(List_init(list), List_last(list))

def l2 :=
  if List_isEmpty(list) then list
  else List_prepend(List_tail(list), List_head(list))

out l1
out l2
