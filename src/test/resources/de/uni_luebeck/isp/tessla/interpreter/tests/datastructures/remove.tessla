in x: Events[Int]

@liftable
def getCount(counts: Map[Int, Int], key: Int) =
    if Map.contains(counts, key)
    then Map.get(counts, key)
    else 0

@liftable
def incCount(counts: Map[Int, Int], key: Int) =
    if key < 0
    then Map.remove(counts, -key)
    else Map.add(counts, key, getCount(counts, key) + 1)

@liftable
def add(set: Set[Int], key: Int) =
    if key < 0
    then Set.remove(set, -key)
    else Set.add(set, key)

def counts: Events[Map[Int, Int]] = default(incCount(last(counts, x), x), Map.empty[Int, Int])

def seen: Events[Set[Int]] = default(add(last(seen, x), x), Set.empty[Int])

out x
out counts
out seen