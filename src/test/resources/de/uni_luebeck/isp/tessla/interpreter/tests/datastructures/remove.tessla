in x: Events[Int]

@liftable
def get_count(counts: Map[Int, Int], key: Int) :=
    if map_contains(counts, key)
    then map_get(counts, key)
    else 0

@liftable
def inc_count(counts: Map[Int, Int], key: Int) :=
    if key < 0
    then map_remove(counts, -key)
    else map_add(counts, key, get_count(counts, key) + 1)

@liftable
def add(set: Set[Int], key: Int) :=
    if key < 0
    then set_remove(set, -key)
    else set_add(set, key)

def counts: Events[Map[Int, Int]] := default(inc_count(last(counts, x), x), map_empty[Int, Int])

def seen: Events[Set[Int]] := default(add(last(seen, x), x), set_empty[Int])

out x
out counts
out seen