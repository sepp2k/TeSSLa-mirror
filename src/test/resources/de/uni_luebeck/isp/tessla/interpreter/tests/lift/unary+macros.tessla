in x: Events[Int]

def add(a: Int, b: Int) := a + b
def sum(x: Int) := add(x, x)
def lift1[A,B](e: Events[A], f: (Option[A]) => Option[B]) :=
  lift(e, nil[Unit], fun(a: Option[A], b: Option[Unit]) => f(a))
def slift1[A,B](e: Events[A], f: (A) => B) :=
  lift1(e, fun(a: Option[A]) => mapOption(a, f))
def mapOption[A,B](a: Option[A], f: (A) => B) :=
  if isNone(a) then None[B] else Some(f(getSome(a)))

out slift1(x, sum) as s
