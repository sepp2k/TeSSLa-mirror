in load: Events[Int]

def queue := AbstractTimeQueue_removeOlder(
  AbstractTimeQueue_enqueue(
    AbstractTimeQueue_removeNewer(
      mergeValues(top, default(last(queue, load), AbstractTimeQueue_empty)),
      time(load)),
    time(load),
    load),
  time(load) - 5)
def s := max(time(load) - 5, time(firstEvent(load)))
def avg1 := if (time(load) - s) > 0 then limit(0, 1000, AbstractTimeQueue_weightedSum1(queue, s) / (time(load) - s)) else 0
def avg2 := if (time(load) - s) > 0 then limit(0, 1000, AbstractTimeQueue_weightedSum2(queue, s) / (time(load) - s)) else 0

out avg1
out avg2

def top := delayedLast(const(AbstractTimeQueue_top), const(10))

# stdlib
def max(a,b) := if a > b then a else b
def firstEvent(a) := default(nil, a)

def limit(a, b, c) := if c < a then a else if c > b then b else c

def mergeValues(a,b) :=
  if default(time(a), 0) >= default(time(b), 0)
  then default(a,b)
  else default(b,a)

def const(x) := default(nil, x)