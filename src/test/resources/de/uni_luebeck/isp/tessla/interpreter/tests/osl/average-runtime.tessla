def foo := average(runtime("foo"))
out foo

def bar := average(runtime("bar"))
out bar

def baz := average(runtime("baz"))
out baz















-- Standard Library
def runtime(name: String) := {
  def call := function_call(name)
  def ret := function_return(name)
  return at(ret, time(ret) - time(call))
}

def at[A,B](trigger: Events[A], values: Events[B]) :=
  filter(values, time(trigger) == time(values))

def sum(x: Events[Int]) := s where {
  def s: Events[Int] := default(last(s,x) + x, 0)
}

def average(x: Events[Int]) := {
  def c := count(x)
  filter(sum(x) / c, c != 0)
}

def count[A](x: Events[A]) := c where {
  def c: Events[Int] := default(last(c,x) + 1, 0)
}

in line: Events[Int]
in column: Events[Int]
in thread_id: Events[Int]
in instruction: Events[String]
in function: Events[String]
in functioncall: Events[String]
in operandcount: Events[Int]

def code_line_exec(l: Int) := filterConst((), line == l && last(line, line) != l)
def function_call(name: String) := filterConst((), functioncall == name)
def function_return(name: String) := filterConst((), function == name && instruction == "ret")

def filterConst[T](x: T, cond: Events[Bool]): Events[T] = lift(cond, nil[Unit], (c: Option[Bool], nix: Option[Unit]) =>
    if getSome(c) then Some(x) else None[T]
)