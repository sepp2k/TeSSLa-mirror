def resetCount[T](values: Events[T], reset: Events[Unit]) := {
    def rc: Events[Int] :=
        default(
            if default(time(reset) > time(values), false)
            then 0
            else if default(time(reset) == time(values), false)
            then 1
            else last(rc, values) + 1,
            0)
    rc
}

def filterConst[T](x: T, cond: Events[Bool]): Events[T] = lift(cond, nil[Unit], (c: Option[Bool], nix: Option[Unit]) =>
    if getSome(c) then Some(x) else None[T]
)

def trigger(condition: Events[Bool]) :=
    filterConst((), condition && !last(condition, condition))

def countSince[T](e: Events[T], condition: Events[Bool]) :=
    resetCount(e, trigger(condition))

in a: Events[Int]
out a
in b: Events[Int]
out b
in e: Events[Unit]
out e

def esSinceAGreaterThanB := countSince(e, a > b)

-- burstLength = 5, wait = 4, burstAmount = 3
def burstStarts: Events[Unit] :=
    defaultFrom(
        filter(e, time(e) - last(time(burstStarts), e) >= 9),
        e)
out burstStarts

def numberInBurst := resetCount(e, burstStarts)
out numberInBurst

def inBursts := time(e) < time(burstStarts) + 5 && numberInBurst <= 3
out inBursts

def property := if a > b then esSinceAGreaterThanB == 0 else inBursts
out property
