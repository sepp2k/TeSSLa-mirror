/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.core

import java.nio.channels.Channels
import java.nio.charset.{CodingErrorAction, StandardCharsets}
import java.nio.file.{Files, Paths}

import org.antlr.v4.runtime.{CharStream, CharStreams}

/**
 * Provides multiple include resolvers, for use in [[Compiler.Options]]
 */

object IncludeResolvers {

  def fromFile(fileName: String): Option[CharStream] = {
    Option.when(Files.exists(Paths.get(fileName))) {
      CharStreams.fromFileName(fileName)
    }
  }

  def fromResource(klass: Class[_], basePath: String)(fileName: String): Option[CharStream] = {
    val fullPath = s"$basePath/$fileName"
    Option(klass.getResourceAsStream(fullPath.toString)).map { stream =>
      val channel = Channels.newChannel(stream)
      CharStreams.fromChannel(
        channel,
        StandardCharsets.UTF_8,
        4096,
        CodingErrorAction.REPLACE,
        fileName,
        -1
      )
    }
  }

  def fromStdlibResource: String => Option[CharStream] =
    fromResource(this.getClass, "/de/uni_luebeck/isp/tessla/stdlib")

  def empty(fileName: String): Option[CharStream] = None
}
