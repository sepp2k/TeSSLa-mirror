/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.core.util

import cats._

import scala.annotation.tailrec

/**
 * Defer a computation until `get` is called.
 */
class Lazy[+A](a: => A) {
  override def toString = s"Lazy($a)"

  lazy val get: A = a
}

object Lazy {
  implicit def monadInstance: Monad[Lazy] = new Monad[Lazy] {
    override def pure[A](x: A) = Lazy(x)

    override def flatMap[A, B](fa: Lazy[A])(f: A => Lazy[B]) = f(fa.get)

    @tailrec
    override def tailRecM[A, B](a: A)(f: A => Lazy[Either[A, B]]): Lazy[B] =
      f(a).get match {
        case Right(b) => Lazy(b)
        case Left(a)  => tailRecM(a)(f)
      }
  }

  def unapply[T](value: Lazy[T]) = Some(value.get)

  def apply[A](a: => A): Lazy[A] =
    new Lazy(a)
}
