/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.core

import de.uni_luebeck.isp.tessla.core.Errors.NonLiteralAnnotationParameter
import de.uni_luebeck.isp.tessla.core.TesslaAST.Core

/**
 * Ensures that annotation parameters are only using constant values.
 * */
object AnnotationValidator extends TranslationPhase[Core.Specification, Core.Specification] {
  override def translate(spec: Core.Specification): TranslationPhase.Result[Core.Specification] = {
    new AnnotationValidatorWorker(spec).translate()
  }

  class AnnotationValidatorWorker(spec: Core.Specification) extends TranslationPhase.Translator[Core.Specification] {
    override protected def translateSpec(): TesslaAST.Core.Specification = {
      val allAnnotations = spec.out.map(_._2) ++ spec.in.toSeq.map(_._2._2) :+ spec.annotations

      allAnnotations.foreach { annotations =>
        annotations.toSeq
          .flatMap {
            case (name, entries) => entries.map(name -> _)
          }
          .foreach {
            case (name, arg) =>
              if (!checkExpressionArg(arg)) {
                error(NonLiteralAnnotationParameter(name, arg))
              }
          }
      }

      spec
    }

    private def checkExpressionArg(arg: Core.ExpressionArg): Boolean = arg match {
      case exp: Core.Expression =>
        exp match {
          case _: Core.StringLiteralExpression | _: Core.IntLiteralExpression | _: Core.FloatLiteralExpression => true
          case record: Core.RecordConstructorExpression                                                        => record.entries.values.map(_._1).forall(checkExpressionArg)
          case _                                                                                               => false
        }
      case _: Core.ExpressionRef => false
    }
  }
}
