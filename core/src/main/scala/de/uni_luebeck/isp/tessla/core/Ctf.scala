/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.core

import de.uni_luebeck.isp.tessla.core.Errors.{CtfInvalidPrefix, CtfKeyNotFound, CtfTypeError}
import org.eclipse.tracecompass.ctf.core.event.IEventDefinition
import org.eclipse.tracecompass.ctf.core.event.types.{
  ICompositeDefinition,
  IDefinition,
  IntegerDefinition,
  StringDefinition
}

object Ctf {
  def getString(event: IEventDefinition, key: String, loc: Location): String = {
    getDefinition(event, key, loc) match {
      case Some(str: StringDefinition) => str.getValue
      case Some(_)                     => throw CtfTypeError(key, "String", loc)
      case _                           => throw CtfKeyNotFound(key, loc)
    }
  }

  def getInt(event: IEventDefinition, key: String, loc: Location): BigInt = {
    getDefinition(event, key, loc) match {
      case Some(i: IntegerDefinition) => BigInt(i.getIntegerValue)
      case Some(_)                    => throw CtfTypeError(key, "Int", loc)
      case _                          => throw CtfKeyNotFound(key, loc)
    }
  }

  def getDefinition(event: IEventDefinition, key: String, loc: Location): Option[IDefinition] = {
    if (key.contains(":")) {
      val Array(prefix, suffix) = key.split(":", 2)
      val fields = prefix match {
        case "context"       => event.getContext
        case "eventcontext"  => event.getEventContext
        case "eventheader"   => event.getEventHeader
        case "packetcontext" => event.getPacketContext
        case "fields"        => event.getFields
        case x               => throw CtfInvalidPrefix(prefix, loc)
      }
      getDefinition(fields, suffix)
    } else {
      getDefinition(event.getFields, key)
    }
  }

  def getDefinition(composite: ICompositeDefinition, key: String): Option[IDefinition] = {
    if (composite.getFieldNames.contains(key)) {
      Some(composite.getDefinition(key))
    } else {
      val path = key.split('.')
      val head = path.head
      val tail = path.tail.mkString(".")
      if (composite.getFieldNames.contains(head)) {
        composite.getDefinition(head) match {
          case c: ICompositeDefinition => getDefinition(c, tail)
          case _                       => None
        }
      } else {
        None
      }
    }
  }
}
