/*
 * Copyright (c) 2020 Institute of Software Engineering and Programming Languages,
 * University of LÃ¼beck, Germany
 *
 * Modified MIT license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this binary (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software and the code which is
 * generated by the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.uni_luebeck.isp.tessla.core.analyses

import de.uni_luebeck.isp.tessla.core.TesslaAST.Core
import de.uni_luebeck.isp.tessla.core.TesslaAST.Core._

object NodeCounter {
  def nodeCount(spec: Core.Specification): Int = {
    spec.out.map(os => nodeCount(spec.definitions, os._1, Set())).sum
  }

  def nodeCount(
    streams: Map[Core.Identifier, Core.Expression],
    stream: Core.ExpressionArg,
    visited: Set[Core.Identifier]
  ): Int = stream match {
    case ref: Core.ExpressionRef if visited.contains(ref.id) => 0
    case ref: Core.ExpressionRef                             => nodeCount(streams, streams(ref.id), visited + ref.id)
    case exp: Core.Expression =>
      extract(exp).map(nodeCount(streams, _, visited)).sum + 1
  }

  private def extract(e: Core.Expression) = e match {
    case ApplicationExpression(TypeApplicationExpression(e: ExternExpression, _, _), args, _) => args
    case ApplicationExpression(e: ExternExpression, args, _)                                  => args
    case _                                                                                    => Seq()
  }
}
