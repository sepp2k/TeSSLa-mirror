define resetCount(self, values, reset) :=
    default(
        if default(time(reset) > time(values), false)
        then 0
        else if default(time(reset) == time(values), false)
        then 1
        else last(self, values) + 1
    , 0)

define trigger(condition) :=
    if condition && !last(condition, condition) then ()

define countSince(self, e, condition) :=
    resetCount(self, e, trigger(condition))

in a: Events<Int>
out a
in b: Events<Int>
out b
in e: Events<Unit>
out e

define esSinceAGreaterThanB := countSince(esSinceAGreaterThanB, e, a > b)

-- burstLength = 5, wait = 4, burstAmount = 3
define burstStarts :=
    defaultFrom(
        if time(e) - last(time(burstStarts), e) >= 9
        then e,
        e)
out burstStarts

define numberInBurst := resetCount(numberInBurst, e, burstStarts)
out numberInBurst

define inBursts := time(e) < time(burstStarts) + 5 && numberInBurst <= 3
out inBursts

define property := if a > b then esSinceAGreaterThanB == 0 else inBursts
out property
