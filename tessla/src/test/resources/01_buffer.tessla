--
-- Macros
--
define onIf(trig, cond) := filter(on(trig), cond: Signal<Boolean>)
define geq(x,y) := not(lt(x,y))
define lt(x,y) := gt(y,x)

-- CONIRAS specific
in MessageTimeStampNode: Events<Int>
in instructionReconstructionMessage.InstructionReconstructionID: Events<Int>
in regChangeMessage.RegChangeMessageValue: Events<Int>
in regChangeMessage.RegChangeMessageID: Events<Int>

define input_vector_timestamps := MessageTimeStampNode
define input_vector_ir_ids := instructionReconstructionMessage.InstructionReconstructionID
define input_vector_RegChangeMessageValue := regChangeMessage.RegChangeMessageValue
define input_vector_RegChangeMessageID := regChangeMessage.RegChangeMessageID

define exec(x) := filter(on(input_vector_ir_ids), eq(mrv(input_vector_ir_ids, 0), constantSignal(x)))

-- Adjust trace point id
define write_tp := 2
define process_tp := 1

--
-- Inputs
--
--define writeElement: Events<Unit> := instruction_executions("main.c:49")
--
define writeElement: Events<Unit> := exec(write_tp)
--define processElement: Events<Unit> := function_calls("main.c:process_data")
define processElement: Events<Unit> := exec(process_tp)

--
-- Spec
--
define diffProcWrite := sub(eventCount(processElement), eventCount(writeElement))
--define error := on processElement if geq(diffProcWrite,1)
define doubleProcessing := onIf(processElement, geq(diffProcWrite,constantSignal(1)))

out doubleProcessing

define diffWriteProc := sub(eventCount(writeElement), eventCount(processElement))
define bufferOverflow := onIf(writeElement, geq(diffWriteProc,constantSignal(6)))

out bufferOverflow